{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Compiling notes as Web-site","text":"<p>Set of instructions that to convert the set of notes into static web-site with public access.</p> <p>As the tools are used:</p> <ul> <li>mkdocs + material<ul> <li>generator of static web-pages with needed functionality and \"web-engine\"</li> </ul> </li> <li>GitHub + Github pages<ul> <li>notes storage and hosting platform</li> </ul> </li> </ul>"},{"location":"00.%20Preparing%20the%20environment.html","title":"Preparation","text":"<p>Assuming Windows 11, install:</p> <ul> <li>Python 3.13.2</li> <li>VSCodium or VSCode</li> <li>Git / Github Desktop</li> </ul> <p>Hereinafter, it is assumes that the project will be in folder <code>D:\\demo_project</code> or, if accessing from WSL <code>/mnt/d/demo_project</code></p> <p>Official documentation</p> <ul> <li>Create the folder <code>D:\\project</code></li> <li>Open it with VSCodium</li> <li>Run the terminal from it </li> </ul>  Windows 11 Ubuntu 24.04 LTS on WSL <pre><code># Create the virtual environment with built-in module \"venv\"\npython -m venv .\\env\n\n# activate the environment\n. .\\env\\Scripts\\Activate.ps1\n\n# update the pip\npython -m pip install --upgrade pip\n\n# Install mkdocs-material\npython -m pip install mkdocs-material\n</code></pre> <pre><code>cd /mnt/d\nmkdir demo_project\ncd demo_project\n\n# venv is not part og Ubuntu WSL by default\nsudo apt install python3-venv -y\n\n# Create the virtual environment \"venv\" module\npython3 -m venv ./env\n\n# activate the environment\n. ./env/bin/activate\n\n# update the pip\npython3 -m pip install --upgrade pip\n\n# Install mkdocs-material\npython3 -m pip install mkdocs-material\n</code></pre> <p>It is all nice, but better to create the file <code>prerequisites.txt</code> for later use and enlist all dependencies over there. In such a case, we can install all other dependencies with one-liner </p> <pre><code>python -m pip install -r prerequisites.txt\n</code></pre> <p>as of now, there will be only one line with <code>mkdocs-material</code>.</p> <p>Now, lets test if it works . From within the same terminal window type : <pre><code>python -m mkdocs new .\n</code></pre></p> <p>This would create the <code>docs</code> folder and configuration file <code>mkdocs.yml</code>. We can see what it created for us, via running the following command: <pre><code>python -m mkdocs serve\n</code></pre></p> <p>NB!: if you are running this server from another computer in the local network (per say from ProxMox container), than replace starting cmd with (or even change the port):</p> <pre><code>python -m mkdocs serve -a 0.0.0.0:8000\n</code></pre> <p>The output should be alike: <pre><code>INFO    -  Building documentation...\nINFO    -  Cleaning site directory\nINFO    -  Documentation built in 0.20 seconds\nINFO    -  [12:44:51] Watching paths for changes: 'docs', 'mkdocs.yml'\nINFO    -  [12:44:51] Serving on http://127.0.0.1:8000/\n</code></pre></p> <p>And we can access the freshly created web-site at the address http://127.0.0.1:8000/</p> <p>Later we can add to prerequisites:</p> <ul> <li><code>mkdocs-material-extensions</code> </li> <li><code>mkdocs-roamlinks-plugin</code></li> </ul> <p>https://github.com/Jackiexiao/mkdocs-roamlinks-plugin</p> <p>An MkDocs plugin that simplifies relative linking between documents and convert [[roamlinks]] for\u00a0vscode-foam\u00a0&amp;\u00a0obsidian</p>"},{"location":"01.%20First%20settings%20and%20tuning.html","title":"First settings and tuning","text":"<p>Official documentation</p> <p>Edit the file <code>mkdocs.yml</code>. By default, it contains:</p> <pre><code>site_name: My Docs\n</code></pre> <p>Let's change it to: <pre><code>site_name: Educational course web-site\nsite_url: https://sitename.example\ntheme:\n    name: material\n</code></pre></p> <p>Save the file. Note:</p> <ul> <li>that the site is auto-updated (live preview)</li> <li><code>yml</code> files don't like mixing indentation with tabs and spaces</li> <li><code>yml</code> can tolerate Cyrillic symbols</li> </ul> <pre><code>site_name: \u0414\u043e\u0434\u0430\u0442\u043e\u043a \u0434\u043e \u043a\u0443\u0440\u0441\u0443\n</code></pre> <p>Since we are using the VSCodium, let's add a few extensions for easier life:</p> <ul> <li>YAML from RedHat, will highlight the errors in YAML files if we'll make any</li> </ul> <p>To make it work, navigate to VSCodium settings -&gt; <code>User</code> -&gt; <code>extensions</code> -&gt; <code>YAML</code>. Here we can see adjustable settings, but we are looking for it's code representation.</p> <p>Than adjust it to be alike: <pre><code>{\n    \"redhat.telemetry.enabled\": false\n    \"yaml.schemas\": {\n        \"https://squidfunk.github.io/mkdocs-material/schema.json\": \"mkdocs.yml\"\n      },\n      \"yaml.customTags\": [\n        \"!ENV scalar\",\n        \"!ENV sequence\",\n        \"!relative scalar\",\n        \"tag:yaml.org,2002:python/name:material.extensions.emoji.to_svg\",\n        \"tag:yaml.org,2002:python/name:material.extensions.emoji.twemoji\",\n        \"tag:yaml.org,2002:python/name:pymdownx.superfences.fence_code_format\"\n      ]\n}\n</code></pre> Those are parts of documentation</p>"},{"location":"02.%20Cosmetics.html","title":"Cosmetics","text":""},{"location":"02.%20Cosmetics.html#theme-switch-light-dark-system","title":"Theme switch: Light / Dark / System","text":"<p>As per documentation</p> <pre><code>theme:\n  name: material \n  palette:\n\n    # Palette toggle for automatic mode\n    - media: \"(prefers-color-scheme)\"\n      toggle:\n        icon: material/brightness-auto\n        name: Switch to light mode\n\n    # Palette toggle for light mode\n    - media: \"(prefers-color-scheme: light)\"\n      scheme: default \n      toggle:\n        icon: material/brightness-7\n        name: Switch to dark mode\n\n    # Palette toggle for dark mode\n    - media: \"(prefers-color-scheme: dark)\"\n      scheme: slate\n      toggle:\n        icon: material/brightness-4\n        name: Switch to system preference\n</code></pre> <p>It creates makes the toggle-switch, that by default gets the scheme of the user browser, but if click, it forces the light mode, and than it forces the dark mode. Afterwards, it loops through the cycle.</p> <p>If making some electronics courses:</p> <ul> <li><code>teal</code> looks like Arduino theme</li> <li><code>indigo</code> looks like STMicroelectronics</li> </ul> <p>More reading about usable symbols for switching themes. </p>"},{"location":"02.%20Cosmetics.html#adjusting-fonts","title":"Adjusting fonts","text":"<p>MKdocs is compatible with Google Fonts.  In case if font adjustment is needed, than add needed fonts:</p> <pre><code>theme:\n  font:  \n\u00a0 \u00a0 text: Red Hat Flex\n\u00a0 \u00a0 code: Red Hat Mono\n</code></pre> <p>P.S.: <code>Roboto Flex</code> looks better to me. Anyway check the support of font for your language</p>"},{"location":"03.%20Markdown%20extensions.html","title":"Markdown extensions","text":"<p>If you are running some sort of technical repo, that you'd probably need:</p> <ul> <li>diagramming:<ul> <li>mermaid diagrams</li> </ul> </li> <li>code blocks<ul> <li>code blocks</li> </ul> </li> <li>user warnings<ul> <li>callouts</li> </ul> </li> <li>switchable content depending on user system (various code for different operating systems)<ul> <li>tabbed content</li> </ul> </li> <li>render of math equations:<ul> <li>KATEX or MathJax: math documentation</li> </ul> </li> <li>some fun / special icons<ul> <li>emoji : documentation</li> </ul> </li> </ul> <p>To adjust all of that:</p> <pre><code>markdown_extensions:\n  - attr_list\n  # for code syntax highlight\n  - pymdownx.highlight:\n      anchor_linenums: true\n      line_spans: __span\n      pygments_lang_class: true\n  - pymdownx.inlinehilite\n  - pymdownx.snippets\n  # for diagramming\n  - pymdownx.superfences:\n      custom_fences:\n        - name: mermaid\n          class: mermaid\n          format: !!python/name:pymdownx.superfences.fence_code_format\n  # for callouts / warnings\n  - admonition\n  - pymdownx.details\n  # for tabbed content\n  - pymdownx.tabbed:\n      alternate_style: true\n  # for rendering emoji\n  - pymdownx.emoji:\n      emoji_index: !!python/name:material.extensions.emoji.twemoji\n      emoji_generator: !!python/name:material.extensions.emoji.to_svg\n</code></pre>"},{"location":"05.%20Testing%20extensions.html","title":"Testing markdown extensions","text":"<p>This page is copy-pasting of example to test if extentions are working correctly</p>"},{"location":"05.%20Testing%20extensions.html#math-equations","title":"Math equations","text":"<p>Examples are taken from documentation and from Overleaf examples</p> \\[ \\cos x=\\sum_{k=0}^{\\infty}\\frac{(-1)^k}{(2k)!}x^{2k} \\] <p>The homomorphism \\(f\\) is injective if and only if its kernel is only the singleton set \\(e_G\\), because otherwise \\(\\exists a,b\\in G\\) with \\(a\\neq b\\) such that \\(f(a)=f(b)\\).</p> \\[ \\left\\lceil \\begin{matrix} 1 &amp; 2 &amp; 3\\\\ a &amp; b &amp; c \\end{matrix} \\right\\rceil \\] <p>And somelarger example from \\(\\LaTeX\\) stackexchagne</p> \\[ \\left[ \\begin{matrix} {\\bar A}{x_1} + {\\tilde B}{x_2} + {\\hat C}{x_3} &amp; {P{{\\bar A}_{1i}}} &amp; \\cdots \\\\ * &amp; { - (1 - {\\mu _1}){P_1}} &amp; \\cdots \\\\ \\vdots &amp; \\vdots &amp; \\ddots \\\\ * &amp; * &amp; \\cdots \\\\ * &amp; * &amp; \\cdots \\\\ * &amp; * &amp; \\cdots \\end{matrix} \\right.  \\nonumber\\\\ \\qquad \\qquad\\left. \\begin{matrix} {P{{\\bar A}_{si}}} &amp; {P{{\\bar B}_i}} &amp; {{{\\bar C}^T}} \\\\ 0 &amp; 0 &amp; 0 \\\\ \\vdots &amp; \\vdots &amp; \\vdots \\\\ { - (1 - {\\mu _s}){P_s}} &amp; 0 &amp; 0 \\\\ * &amp;{ - {\\gamma ^2}I} &amp; {{{\\bar D}^T}} \\\\ * &amp; * &amp; { - I} \\end{matrix} \\right] &lt; 0 \\] <p>Full list of symbols</p>"},{"location":"05.%20Testing%20extensions.html#diagrams","title":"Diagrams","text":"<p>Examples from digrams section </p> <p>This must generate the flow chart:</p> <pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre> <p>This is suppoed to generate sequence diagram:</p> <pre><code>sequenceDiagram\n  autonumber\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</code></pre> <p>And this is supposed to generate the state diagram:</p> <pre><code>stateDiagram-v2\n  state fork_state &lt;&lt;fork&gt;&gt;\n    [*] --&gt; fork_state\n    fork_state --&gt; State2\n    fork_state --&gt; State3\n\n    state join_state &lt;&lt;join&gt;&gt;\n    State2 --&gt; join_state\n    State3 --&gt; join_state\n    join_state --&gt; State4\n    State4 --&gt; [*]</code></pre>"},{"location":"05.%20Testing%20extensions.html#code-blocks","title":"Code blocks","text":"<p>Examples are compiled from official documentation</p> <p>This should render just a code with Copy to clipboard button</p> <pre><code># Function to add two numbers\ndef add_two_numbers(num1, num2):\n    return num1 + num2\n\n# Example usage\nresult = add_two_numbers(5, 3)\nprint('The sum is:', result)\n</code></pre> <p>This should do the same with highlighting of python code:</p> <pre><code># Function to add two numbers\ndef add_two_numbers(num1, num2):\n    return num1 + num2\n\n# Example usage\nresult = add_two_numbers(5, 3)\nprint('The sum is:', result)\n</code></pre> <p>This should render C++ code with line numbers, title and highlighted lines 10 and 11:</p> Arduino Blink example<pre><code>void setup() {\n  // initialize digital pin LED_BUILTIN as an output.\n  pinMode(LED_BUILTIN, OUTPUT);\n  // make sure the LED is OFF (LOW is the voltage level 0)\n  digitalWrite(LED_BUILTIN, LOW); \n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n    digitalWrite(LED_BUILTIN, !digitalRead(LED_BUILTIN));  // read the current state and write inverted value\n    delay(1000);                      // wait for a second, delay is specified in milliseconds\n}\n</code></pre> <p>Here should be examples of inline code: </p> <ul> <li>Python : The <code>range()</code> function is used to generate a sequence of numbers</li> <li>C++ : The <code>for (int i = 0, i &lt; 10, i++){};</code> generates loop that iterates 10 times</li> </ul>"},{"location":"05.%20Testing%20extensions.html#content-tabs","title":"Content tabs","text":"CC++ <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  printf(\"Hello world!\\n\");\n  return 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nint main(void) {\n  std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre> <p>This feature is also supposed to work with plane text without code inside and with special symbols in the headers</p>  Windows Ubuntu <pre><code>. .\\env\\Scripts\\Activate.ps1\n</code></pre> <pre><code>. ./env/bin/activate\n</code></pre>"},{"location":"05.%20Testing%20extensions.html#callouts","title":"Callouts","text":"<p>Title of the callout</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Collapsible callout <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"07.%20Including%20materails%20into%20page.html","title":"Including materials into web-page","text":""},{"location":"07.%20Including%20materails%20into%20page.html#incorporation-online-materials","title":"Incorporation online materials","text":"<p>Shared youtube video:</p> <p>To obtain such video, open any video on youtube, click <code>Share</code> -&gt; <code>Emmbed</code>, that it will provide the piee of code that can be inserted directly.</p>"},{"location":"08.%20Footer%2C%20social%20media%20and%20copyrights.html","title":"Footer, social media and pagination","text":"<p>Official documentation </p> <p>Edit the <code>mkdock.yml</code> file, and withing the <code>theme</code> chapter, adjust:</p> <pre><code>logo: assets/logo.png\nfavicon: assets/favicon.ico\n</code></pre> <p>Then, create within <code>docs</code> folder folder <code>assets</code> and create there - <code>logo.png</code>     - the image file that will be used as your logo on the website - <code>favicon.ico</code>     - the icon that will be used in your browser tab name</p> <p>Alternatively, you can use the symbols/fonts to make a logo:</p> <pre><code>icon: \n  logo: octicons/rocket-24\n</code></pre> <p>But, using the <code>favicon</code> in the same manner is not possible (yet?).</p> <p>for the social links, place this in the end of <code>mkdocs.yml</code>: <pre><code>extra:\n  social:\n    - icon: fontawesome/brands/youtube\n      link: https://your_youtube_channel\n    - icon: fontawesome/brands/linkedin\n      link: https://your_linkedin_profile\n    - icon: fontawesome/brands/github\n      link: https://your_github_profile\n    - icon: fontawesome/solid/envelope\n      link: mailto:&lt;email-address&gt;\n    - icon: fontawesome/solid/phone\n      link: tel:&lt;your-phonenumber&gt;\n\ncopyright: Copyright &amp;copy; 2025 Author\n</code></pre></p> <p>This is why we needed emoji ((</p> <p>Full list of supported symbols: https://squidfunk.github.io/mkdocs-material/reference/icons-emojis/</p> <p>Quick info, if running messengers channels, than useful logos:</p> <ul> <li>Telegram : <code>fontawesome/brands/telegram</code> <code>:fontawesome-brands-telegram:</code></li> <li>WhatsApp : <code>fontawesome/brands/whatsapp</code> </li> <li>Signal : <code>fontawesome/brands/signal-messenger</code> </li> <li>Slack : <code>fontawesome/brands/slack</code></li> </ul> <p>If for some reason you need to hide the remark that it was created with MKDOCS, it is doable:</p> <pre><code>extra:\n  generator: false\n</code></pre> <p>Also, footer can be used as navigation, it is convenient, but takes some screen space. To allow this, add into <code>mkdocs.yml</code> :</p> <pre><code>features:\n    - navigation.footer\n</code></pre>"},{"location":"09.%20Publishing%20to%20GitHub.html","title":"Version control + Publishing to GitHub pages","text":""},{"location":"09.%20Publishing%20to%20GitHub.html#single-repo-way","title":"Single-repo way","text":"<p>a.k.a. Mono-repository</p> <p>In VSCodium you can simply initialize the Git repository. </p> <p>Interestingly enough it ignored the <code>env</code> folder. Usually, before initializing, you should create file <code>.gitignore</code> and put everything, that is not needed there. Bttert to create it now, and add there everything for python .gitignore also add there <code>site</code> folder. This is the default folder where mkdocs build the documentation. So, just add in the beginning of <code>.gitignore</code></p> <pre><code># MkDocs documentation\nsite*/\npublic*/\n</code></pre> <p>Alternatively, there is a web-service for generating <code>.gitignore</code> files. </p> <p>At this time point, let's check push everything to the Github with VS Code. </p> <p>Now, add to your repository possibility to publish from <code>gh-pages</code> branch, as specified per documentations and to make it possible, create the CI file <code>.github\\workflow\\ci.yml</code></p> .github\\workflows\\ci.yml<pre><code>name: ci \non:\n  push:\n    branches:\n      - main\npermissions:\n  contents: write\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Configure Git Credentials\n        run: |\n          git config user.name github-actions[bot]\n          git config user.email 41898282+github-actions[bot]@users.noreply.github.com\n      - uses: actions/setup-python@v5\n        with:\n          python-version: 3.x\n      - run: echo \"cache_id=$(date --utc '+%V')\" &gt;&gt; $GITHUB_ENV \n      - uses: actions/cache@v4\n        with:\n          key: mkdocs-material-${{ env.cache_id }}\n          path: .cache\n          restore-keys: |\n            mkdocs-material-\n      - run: |\n          python -m pip install --upgrade pip\n          python -m pip install -r prerequisites.txt \n      - run: mkdocs gh-deploy --force\n</code></pre> <p>This example is based on this, with some differences: - using the default <code>main</code> branch as is currently made by GitHub - installing the bunch of prerequisites from the <code>prerequisites.txt</code> file</p> <p>The only problem with this approach is that it you MUST HAVE this repository as public or have a paid subscription. Don't store any  private info in such repository.</p> <p>Example of such project cold be Digital Garden</p> <p>Free Hosting for static pages for personal use:</p> <ul> <li>GitHub Pages</li> <li>CloudFlare Pages</li> <li>GitLab Pages</li> </ul>"},{"location":"09.%20Publishing%20to%20GitHub.html#2-repo-way","title":"2-repo way","text":"<p>Create on Github the empty PUBLIC repository <code>course_env</code> and private <code>course_src</code>. </p> <p>Normally, it would be called alike <pre><code>git@github.com:your_username/course_env.git\ngit@github.com:your_username/course_src.git\n</code></pre></p> <p>Open the terminal and run: <pre><code>cd \\mnt\\d\\demoproject\ngit init .\n</code></pre></p> <p>NB!: A while ago, githb changed the default name of branches from <code>master</code> to <code>main</code></p> <p>Nowadays, if running manually, either run <pre><code>git config --global init.defaultBranch main\n</code></pre> before  running <code>git init .</code> or use <code>git branch -m main</code></p> <p>after that create the <code>.gitigore</code>, just like on the step above and let's make the first push</p> <pre><code>git init\ngit add -A\ngit commit -m \"Initial commit\"\ngit remote add origin https://github.com/your_username/course_env.git\ngit branch -M main\ngit push -u origin main\n</code></pre> <p>Remark: at the stage of <code>git commit -m \"Initial commit\"</code> it may throw the error <pre><code>error: src refspec main does not match any\n</code></pre> This mean that you need to add some identity to the PC you're working on. Run:  <pre><code>git config --global user.email \"your_email@domain.com\"\ngit config --global user.name \"your_nickname\"\n</code></pre></p> <p>It is not mandatory to be the same as your GitHub account. </p> <p>On windows use <code>gh auth login</code> command after installing the github cli.</p> <p>Now, let's add submodule:</p> <pre><code>git submodule add https://github.com/your_username/course_src.git docs\n</code></pre> <p>It would throw the error, that <code>` <pre><code>fatal: 'docs' already exists in the index and is not a submodule\n</code></pre> This is because we need to remove the</code>docs<code>folder from control of parental repository</code>course_env` (but first, back-up those files inside), push those changes, and that add submodule:</p> <pre><code>rm -rf /mnt/d/demoproject/docs\ngit commit -a \"Purging docs folder\"\ngit push\ngit submodule add --force --branch main https://github.com/your_username/course_src.git docs\ngit add .\ngit commit -m \"Added docs as submodule\"\ngit push\n</code></pre> <p>at this point, git will create <code>.gitmodules</code> file in the root of project with description of what are dependencies of current project.  And on the page of the <code>course_env</code> there will be one more link to the submodule as dependency</p> <p>Now go to your GitHub account \u2192 GitHub Settings \u2192 Developer Settings \u2192 Personal access tokens \u2192 Fine-grained tokens. As of now this is still in beta, but this should work better, since it allows to define exact repositories, where such token is valid. Create token named <code>course_PAT_test</code> with no expiration day and tick the <code>Only selected repositories</code>, and enlist the following: - <code>course_src</code> - <code>course_env</code></p> <p>Grant read and write access for: - Content - Actions</p> <p>Now click generate token. It should look like: <pre><code>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\n</code></pre></p> <p>Add the created PAT as a repository secret: - Go to your  <code>course_env</code> settings - Navigate to Secrets and variables \u2192 Actions - Create a new secret named <code>PAT_TOKEN</code> - Paste your PAT as the value</p> <p>P.S. Ideally create 2 tokens with read-only permissions to the <code>course_src</code> repo</p> <p>Now, change the config file with the following content in the <code>course_env</code> repository:</p> .github\\workflows\\ci.yml<pre><code>name: Update Submodule and build documentation\non:\n  push:\n    branches:\n      - main\n      - master\n  repository_dispatch:\n    types: [submodule_update]\n  workflow_dispatch:\n\npermissions:\n  contents: write\n\njobs:\n  sync:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          submodules: true\n          token: ${{ secrets.PAT_TOKEN }}\n\n      - name: Git config\n        run: |\n          git config --global user.name 'github-actions[bot]'\n          git config --global user.email 'github-actions[bot]@users.noreply.github.com'\n\n      - name: Update submodule\n        run: |\n          cd docs\n          git checkout main\n          git pull origin main\n          cd ..\n          git add docs\n\n      - name: Commit and push if changed\n        run: |\n          if git diff --staged --quiet; then\n            echo \"No changes to commit\"\n          else\n            git commit -m \"Update docs submodule to latest main\"\n            git push\n          fi\n\n  deploy:\n      needs: sync\n      runs-on: ubuntu-latest\n      steps:\n        - uses: actions/checkout@v4\n          with:\n              submodules: true\n              token: ${{ secrets.PAT_TOKEN }}\n              fetch-depth: 0  # Needed for gh-deploy\n        - name: Configure Git Credentials\n          run: |\n            git config user.name github-actions[bot]\n            git config user.email 41898282+github-actions[bot]@users.noreply.github.com\n        - uses: actions/setup-python@v5\n          with:\n            python-version: 3.x\n        - run: echo \"cache_id=$(date --utc '+%V')\" &gt;&gt; $GITHUB_ENV \n        - uses: actions/cache@v4\n          with:\n            key: mkdocs-material-${{ env.cache_id }}\n            path: .cache\n            restore-keys: |\n              mkdocs-material-\n        - run: |\n            python -m pip install --upgrade pip\n            python -m pip install -r prerequisites.txt \n        - run: mkdocs gh-deploy --force\n</code></pre> <p>Now, create a separate token to allow trigger update in the <code>course_env</code> as soon as there is a new push to <code>course_scr</code> repository.</p> <ul> <li>Create a new Fine-grained PAT for the <code>course_scr</code> repository to trigger the parent:<ul> <li>Repository access: Select the <code>course_env</code> repository</li> <li>Required permissions:<ul> <li>\"Actions\": Read and write (to trigger workflows)</li> <li>\"Content\": Read and write (to use repository_dispatch)</li> <li>\"Metadata\": Read-only (automatically included)</li> </ul> </li> </ul> </li> <li>Add this token as a secret in the child repository:<ul> <li>Name it <code>PARENT_TRIGGER_TOKEN</code></li> <li>Store the PAT value</li> </ul> </li> </ul> <p>Add <code>.github\\workflow\\ci.yml</code> file to the <code>course_src</code> repository:</p> .github\\workflows\\ci.yml<pre><code>name: Trigger Parent Repository Update\non:\n  push:\n    branches:\n      - main\n      - master\n\njobs:\n  trigger:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Git config\n        run: |\n          git config --global user.name 'github-actions[bot]'\n          git config --global user.email 'github-actions[bot]@users.noreply.github.com'\n\n      - name: Trigger parent repository workflow\n        run: |\n          curl -L \\\n            -X POST \\\n            -H \"Accept: application/vnd.github+json\" \\\n            -H \"Authorization: Bearer ${{ secrets.PARENT_TRIGGER_TOKEN }}\" \\\n            -H \"X-GitHub-Api-Version: 2022-11-28\" \\\n            https://api.github.com/repos/your_username/course_env/dispatches \\\n            -d '{\"event_type\":\"submodule_update\",\"client_payload\":{\"unit\":false,\"integration\":true}}'\n</code></pre>"},{"location":"09.%20Publishing%20to%20GitHub.html#3-repo-way","title":"3-repo way","text":"<p>Create a new Fine-grained PAT with access to the target documentation repository - Repository access: Select the target docs repository - Permissions needed: \"Contents\" (Read and write)</p> <p>Add this token as a new secret in your parent repository: - Go to repository settings - Add new secret named <code>DOCS_DEPLOY_TOKEN</code> - Paste the new PAT value</p> <p>replace the ci file in the <code>course_env</code> repository with following content:</p> .github\\workflows\\ci.yml<pre><code>name: Update Submodule and build documentation\non:\n  push:\n    branches:\n      - main\n      - master\n  repository_dispatch:\n    types: [submodule_update]\n  workflow_dispatch:\npermissions:\n  contents: write\n\njobs:\n  sync:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          submodules: true\n          token: ${{ secrets.PAT_TOKEN }}\n\n      - name: Git config\n        run: |\n          git config --global user.name 'github-actions[bot]'\n          git config --global user.email 'github-actions[bot]@users.noreply.github.com'\n\n      - name: Update submodule\n        run: |\n          cd docs\n          git checkout main\n          git pull origin main\n          cd ..\n          git add docs\n\n      - name: Commit and push if changed\n        run: |\n          if git diff --staged --quiet; then\n            echo \"No changes to commit\"\n          else\n            git commit -m \"Update docs submodule to latest main\"\n            git push\n          fi\n\n  deploy:\n      needs: sync\n      runs-on: ubuntu-latest\n      steps:\n        - uses: actions/checkout@v4\n          with:\n              submodules: true\n              token: ${{ secrets.PAT_TOKEN }}\n              fetch-depth: 0  # Needed for gh-deploy\n        - name: Configure Git Credentials\n          run: |\n            git config user.name github-actions[bot]\n            git config user.email 41898282+github-actions[bot]@users.noreply.github.com\n        - uses: actions/setup-python@v5\n          with:\n            python-version: 3.x\n        - run: echo \"cache_id=$(date --utc '+%V')\" &gt;&gt; $GITHUB_ENV \n        - uses: actions/cache@v4\n          with:\n            key: mkdocs-material-${{ env.cache_id }}\n            path: .cache\n            restore-keys: |\n              mkdocs-material-\n        - run: |\n            python -m pip install --upgrade pip\n            python -m pip install -r prerequisites.txt \n        - run: mkdocs build\n\n        - name: Push to documentation repository\n          run: |\n            cd site\n            git init\n            git add -A\n            git config user.name github-actions[bot]\n            git config user.email 41898282+github-actions[bot]@users.noreply.github.com\n            git commit -m \"Update documentation\"\n            git branch -M main\n            git remote add origin https://x-access-token:${{ secrets.DOCS_DEPLOY_TOKEN }}@github.com/your_username/course_site.git\n            git push -f origin main\n</code></pre> <p>After this, you can make <code>course-env</code> repository private, and go to the <code>course_site</code> site, start hosting GitHub Pages of it from the <code>main</code> branch. Additionally, stop hosting GitHub Pages from the <code>course_env</code> repository, and delete the <code>gh-pages</code> brunch. </p>"},{"location":"09.%20Publishing%20to%20GitHub.html#other-reading-on-posting-to-remote-repositories","title":"Other reading on posting to remote repositories","text":"<ul> <li>https://github.com/mkdocs/mkdocs/discussions/3298</li> <li>https://megaw.co.za/github_actions_mkdocs/</li> <li>https://medium.com/@harryalexdunn/documentation-as-code-how-to-build-deploy-a-centralised-documentation-site-using-mkdocs-gitlab-2dc86e071bd0</li> </ul>"},{"location":"10.%20Using%20Obsidian%20for%20editing%20nodes.html","title":"Use Obsidian for note editing","text":"<p>Install Obsidian and open the docs folder as Vault</p>"},{"location":"10.%20Using%20Obsidian%20for%20editing%20nodes.html#extensions","title":"Extensions","text":"<p>First, enable the community plugins. Than, install the following extensions/plugins:</p> <ul> <li>Obsidian Git<ul> <li>Set to pull on start-up</li> </ul> </li> </ul>"},{"location":"10.%20Using%20Obsidian%20for%20editing%20nodes.html#some-settings","title":"Some settings","text":"<ul> <li>gear button near the Vault name:<ul> <li>Files and Links:<ul> <li>Default Location for new notes : <code>Vault Folder</code></li> <li>New link format : <code>Relative path to file</code></li> <li>Use [[Wikilinks]] : Disabled</li> <li>Detect all file extensions : Enabled</li> <li>Default location for new attachments : <code>In subfolder under current folder</code>:<ul> <li>Subfolder name : <code>attachments/images</code></li> </ul> </li> </ul> </li> <li>Templates:<ul> <li>Template folder location: <code>.templates</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"10.%20Using%20Obsidian%20for%20editing%20nodes.html#configure-gitignore","title":"Configure <code>.gitignore</code>","text":"<pre><code>.obsidian/*\n\n# exclude plugins/ but keep the data.json files in order to sync plugin settings\n.obsidian/plugins/*/*\n!.obsidian/plugins/*/data.json\n\n# Exclude Untitled Notes\nUntitled*\n# Exclude \"bad\" names\nnull*\n\n# Add below lines to exclude OS settings and caches\n.trash/\n.DS_Store\n</code></pre>"}]}